

Grafos sao compostos por  vertices (nos) e edges (relacionamentos)

3 tipos de grafos

	Undirects, unweighted : sem direcinamento. Ex estrada ligando cidades
	
	Direct Graphs: uma direcao. 
	
	Weighted grapfs: com um peso associado ao relacionamento. 
			(numero ou outra infomacao). 
			

O peso muitas vezes pode ser negativo em algumas aplicacoes, indicando uma 
perda e nao um lucro. Mas isso depende muito da aplicacao. 


Se a quantidade de grafos nao for muito grande, podemos usar uma linkedlist, onde
√© armazenado o nome do vertice e o valor do relacionamento. Pag 153. 

A quantidade de vertices sendo muito grande e necessitando de acesso rapido, o melhor
e usar uma matriz. pag 154


Existem duas formas de realizar procura em grafos: 
	
	Depth-First Search    (profundidade)
	Breadth-First Search	(largura)
	

	Depth-First Search
		
		tem uma funcao recursiva chamada dfsVisit() que visita um vertice ainda nao 
		visitado previamente. 
		
		Ele marca os vertices ja visitados com "cores".
			Branco: ainda nao visitado
			Cinza: ja visitado, mas com vertice adjacente ainda nao visitado
			Preto: ja visitado e sem adjacentes nao visitados
			
		Para encontrar o caminho faz tentativas cegas at√© encontrar a saida. Como ele nao tem 
		conhecimento da topologia do grafo, sai buscando pelos relacionamentos. 
		
		
		Best, Average Worst : O(V+E)
		
			
			depthFirstSearch(G,s)
				foreach v in V do
					discovered[v] = finished[v] = pred[v] = -1
					color[v] = White
				counter = 0
				dfsVisit(s)
			end
			
			dfsVisit(u)
				color[u] = Gray
				discovered[u] = ++counter
				
				foreach neighbor v of u do
					if color[v] = Whiete then
						pred[v] = u
						dfsVisit(v)
				color[u] = Black
				finished[u] = ++counter
			end
			
		
		O depth search come√ßa visitando o s dfsVisit(s) e entao parte para os vertices
		adjacentes de s dfsVisit(u) recursivamente, at√© que nao tenha mais vertices
		na cor branca adjacentes ao s. A funcao entao retorna. 
		
		Depois de retornar, o depth entao pega o vertice mais proximo a s e visita os 
		vertices que ainda nao foram visitado adjacentes a esse. 
		
		O depth vai sitando todos os vertices que podem ser atingidos apatir de s. 
		ele mantem um contador de quando √© a primeira visita ou quando o elemento 
		ja atingiu o black (todos os adjacentes visitados)
		
		records: 
			pred[v] : usado para manter o caminho para o s. 
			discovered[v] : quando o depth encontra pela primeira vez o v (gray?)
			finished[v] : quando termina com o vertice v (black?)
			
		
		Como o DFS visita uma vez o grafo, tera uma perfomance O(n) e o controle das cores
		È feito em uma matriz ou array separado do grafo. Isso torna o grafo read-only. 
		
		
			
	Breadth-First Search (largura)
	
		A busca em largura age de forma diferente do que profundidade. A busca em largura 
		efetua a busca por uma distancia k de s antes de k+1 (ou seja, por layers). 
		
		Ele nao visita vertices que nao tenham ligacao com s. Esse algoritmo funciona com 
		grafos diretos ou indiretos. 
		
		
		Best, Average, Worst O(V+E)
			
			breadthFirstSearch(G,s)
				
				foreach vin V do
					pred[v] = -1
					dist[v] = infinito
					color[v] = White
				
				color[s] = Gray
				dist[s] = 0
				Q = empoty Queue 
				enqueue(Q,s)
				
				while Q is not empty do
					u = head(Q)
					
					foreach neighbor v of u do
						if color[v] = White then
							dist[v] = dist[u] +1
							pred[v] = u
							color[v] = Gray
							enqueue(Q,v)
							
						dequeue(Q)
						color[u] = Black
			end
		
	
	Single-Source Shortest Path
	
		Para calcular a menor distancia usamos o dijkstras algorithm. 
		
		Esse algoritmo confia em um priority queue que tem uma coleÁ„o de itens 
		com um valor de peso associado. 
		
			Best, Average, Worst O( (V+E)*logV ) 
		
			singleSourceShortest(G,s)
				
				PQ = empty Priority Queue
				
				foreach v in V do
					dist[v] = infinito
					pred[v] = -1
					
				dist[s] = 0
				foreach v in V do
					insert (v,dist[v]) into PQ
					
				while PQ is not empty do
				
					u = getMin(PQ)
					foreach neighbor v of u do
						
						w = weight of edge (u,v)
						newLen = dist[u] + w
						if newLen < dist[v] then
							decreasePriority (PQ,v,newLen)
							dist[v] = newLen
							pred[v] = u
			
			end
		
		
		Existem duas funcoes, o getMin() e o decreasePriority(). 
			getMin() - retorna o valor minimo do que esta no PQ. ( o item mais importante)
			decreasePriority() - possibilita ajustar o valor em PQ confome a analise È feita. (aumentar a importancia de um item)
			
			
		
			
		
		
		
		
		
		
		
		
		


 